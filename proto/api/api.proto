syntax = "proto2";

import "page.proto";
import "route.proto";
import "theme.proto";
import "struct.proto";
import "data.proto";

package ketchup.api;

enum ErrorCode {
    INTERNAL_SERVER_ERROR = 1;
    NOT_FOUND = 2;
    FORBIDDEN = 3;
}

message Error {
    optional ErrorCode code = 1;
    optional string title = 2;
    optional string detail = 3; // optional long message
    repeated FieldError fields = 4; // optionally indicate fields with error
}

message FieldError {
    optional string field = 1;
    optional string code = 2;
    optional string title = 3;
    optional string detail = 4;
}

message ListOptions {
}

message UpdatePageRoutesRequest {
    repeated ketchup.models.Route routes = 1;
}

message GetRenderedPageRequest {
    enum RenderedPageFilter {
        all = 1;
        published = 2;
        draft = 3;
    }
    message RenderedPageOptions {
        optional RenderedPageFilter filter = 1;
        // repeated string tags = 2;
    }
    optional RenderedPageOptions options = 1;
}

message GetRenderedPageResponse {
    optional google.protobuf.Struct data = 1;
}

message ListPageRequest {
    enum ListPageFilter {
        all = 1;
        published = 2;
        draft = 3;
    }
    message ListPageOptions {
        optional ListPageFilter filter = 1;
        // repeated string tags = 2;
    }
    optional ListOptions list = 1;
    optional ListPageOptions options = 2;
}

message ListPageResponse {
    repeated ketchup.models.Page pages = 1;
}

message ListRouteRequest {
    message ListRouteOptions {
        optional string page_uuid = 1;
    }
    optional ListOptions list = 1;
    optional ListRouteOptions options = 2;
}

message ListRouteResponse {
    repeated ketchup.models.Route routes = 1;
}

message ListThemeResponse {
    repeated ketchup.models.Theme themes = 1;
}

message GetThemeResponse {
    optional ketchup.models.Theme theme = 1;
    optional string ref = 2;
}

message UpdateDataRequest {
    repeated ketchup.models.Data data = 1;
}

message ListDataResponse {
    repeated ketchup.models.Data data = 1;
}

message TLSSettingsResponse {
    optional string tls_email = 1;
    optional string tls_domain = 2;
    optional string agreed_on = 3;
    optional string terms_of_service = 4;
    optional bool has_certificate = 5;
}

message EnableTLSRequest {
    optional string tls_email = 1;
    optional string tls_domain = 2;
    optional bool agreed = 3;
}

message CheckThemeForUpdateResponse {
    optional string old_ref = 1;
    optional string current_ref = 2;
}

message InstallThemeRequest {
    optional string name = 1;
    optional string vcs_url = 2;
    optional string registry_url = 3;
}

message UpdateThemeRequest {
    optional string name = 1; // extracted from URL
    optional string ref = 2;
}
