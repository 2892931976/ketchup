// Code generated by protoc-gen-go.
// source: data.proto
// DO NOT EDIT!

package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Data struct {
	Uuid       *string    `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Key        *string    `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value      *string    `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Timestamps *Timestamp `protobuf:"bytes,5,opt,name=timestamps" json:"timestamps,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Data_Short
	//	*Data_Text
	//	*Data_Multiple
	Type             IsData_Type `protobuf_oneof:"type"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type IsData_Type interface {
	IsData_Type()
}

type Data_Short struct {
	Short *ContentString `protobuf:"bytes,11,opt,name=short,oneof"`
}
type Data_Text struct {
	Text *ContentText `protobuf:"bytes,12,opt,name=text,oneof"`
}
type Data_Multiple struct {
	Multiple *ContentMultiple `protobuf:"bytes,13,opt,name=multiple,oneof"`
}

func (*Data_Short) IsData_Type()    {}
func (*Data_Text) IsData_Type()     {}
func (*Data_Multiple) IsData_Type() {}

func (m *Data) GetType() IsData_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Data) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *Data) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Data) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Data) GetTimestamps() *Timestamp {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *Data) GetShort() *ContentString {
	if x, ok := m.GetType().(*Data_Short); ok {
		return x.Short
	}
	return nil
}

func (m *Data) GetText() *ContentText {
	if x, ok := m.GetType().(*Data_Text); ok {
		return x.Text
	}
	return nil
}

func (m *Data) GetMultiple() *ContentMultiple {
	if x, ok := m.GetType().(*Data_Multiple); ok {
		return x.Multiple
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Data) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Data_OneofMarshaler, _Data_OneofUnmarshaler, _Data_OneofSizer, []interface{}{
		(*Data_Short)(nil),
		(*Data_Text)(nil),
		(*Data_Multiple)(nil),
	}
}

func _Data_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Data)
	// type
	switch x := m.Type.(type) {
	case *Data_Short:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Short); err != nil {
			return err
		}
	case *Data_Text:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case *Data_Multiple:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Multiple); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Data.Type has unexpected type %T", x)
	}
	return nil
}

func _Data_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Data)
	switch tag {
	case 11: // type.short
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContentString)
		err := b.DecodeMessage(msg)
		m.Type = &Data_Short{msg}
		return true, err
	case 12: // type.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContentText)
		err := b.DecodeMessage(msg)
		m.Type = &Data_Text{msg}
		return true, err
	case 13: // type.multiple
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContentMultiple)
		err := b.DecodeMessage(msg)
		m.Type = &Data_Multiple{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Data_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Data)
	// type
	switch x := m.Type.(type) {
	case *Data_Short:
		s := proto.Size(x.Short)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Data_Text:
		s := proto.Size(x.Text)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Data_Multiple:
		s := proto.Size(x.Multiple)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Data)(nil), "ketchup.models.Data")
}
func (m *Data) SetUuid(v *string) {
	m.Uuid = v
}

func (m *Data) SetKey(v *string) {
	m.Key = v
}

func (m *Data) SetValue(v *string) {
	m.Value = v
}

func (m *Data) SetTimestamps(v *Timestamp) {
	m.Timestamps = v
}

func init() { proto.RegisterFile("data.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x93, 0x36, 0x11, 0x9d, 0x5a, 0x91, 0xc1, 0xc3, 0x5a, 0x11, 0x8b, 0xa7, 0x9e, 0x02,
	0x0a, 0x1e, 0x3c, 0x78, 0x51, 0x0f, 0xb9, 0x78, 0x59, 0xfb, 0x02, 0x4b, 0x33, 0xb4, 0xa1, 0xbb,
	0xd9, 0x25, 0x3b, 0x2b, 0xed, 0x4b, 0xf9, 0x8c, 0xe2, 0xae, 0x8a, 0x0a, 0xb9, 0xfd, 0xf3, 0xcf,
	0xf7, 0xc1, 0x0f, 0xd0, 0x28, 0x56, 0x95, 0xeb, 0x2d, 0x5b, 0x3c, 0xd9, 0x12, 0xaf, 0x36, 0xc1,
	0x55, 0xc6, 0x36, 0xa4, 0xfd, 0x6c, 0xba, 0xb2, 0x1d, 0x53, 0xc7, 0xe9, 0x3d, 0x03, 0xa7, 0xd6,
	0x94, 0xf2, 0xf5, 0xfb, 0x08, 0x8a, 0x67, 0xc5, 0x0a, 0x11, 0x8a, 0x10, 0xda, 0x46, 0xe4, 0xf3,
	0x7c, 0x71, 0x24, 0x63, 0xc6, 0x53, 0x18, 0x6f, 0x69, 0x2f, 0x46, 0xb1, 0xfa, 0x8c, 0x78, 0x06,
	0xe5, 0x9b, 0xd2, 0x81, 0xc4, 0x38, 0x76, 0xe9, 0xc0, 0x7b, 0x00, 0x6e, 0x0d, 0x79, 0x56, 0xc6,
	0x79, 0x51, 0xce, 0xf3, 0xc5, 0xe4, 0xf6, 0xbc, 0xfa, 0x3b, 0xa2, 0x5a, 0x7e, 0x13, 0xf2, 0x17,
	0x8c, 0x77, 0x50, 0xfa, 0x8d, 0xed, 0x59, 0x4c, 0xa2, 0x75, 0xf9, 0xdf, 0x7a, 0x4a, 0xcb, 0x5f,
	0xb9, 0x6f, 0xbb, 0x75, 0x9d, 0xc9, 0x44, 0xe3, 0x0d, 0x14, 0x4c, 0x3b, 0x16, 0xc7, 0xd1, 0xba,
	0x18, 0xb0, 0x96, 0xb4, 0xe3, 0x3a, 0x93, 0x11, 0xc5, 0x07, 0x38, 0x34, 0x41, 0x73, 0xeb, 0x34,
	0x89, 0x69, 0xd4, 0xae, 0x06, 0xb4, 0x97, 0x2f, 0xac, 0xce, 0xe4, 0x8f, 0xf2, 0x78, 0x00, 0x05,
	0xef, 0x1d, 0x7d, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xf4, 0xb4, 0x66, 0x68, 0x01, 0x00, 0x00,
}
