// Code generated by protoc-gen-go.
// source: packages.proto
// DO NOT EDIT!

package packages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Package_Type int32

const (
	Package_unknown Package_Type = 0
	Package_theme   Package_Type = 1
	Package_plugin  Package_Type = 2
)

var Package_Type_name = map[int32]string{
	0: "unknown",
	1: "theme",
	2: "plugin",
}
var Package_Type_value = map[string]int32{
	"unknown": 0,
	"theme":   1,
	"plugin":  2,
}

func (x Package_Type) Enum() *Package_Type {
	p := new(Package_Type)
	*p = x
	return p
}
func (x Package_Type) String() string {
	return proto.EnumName(Package_Type_name, int32(x))
}
func (x *Package_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Package_Type_value, data, "Package_Type")
	if err != nil {
		return err
	}
	*x = Package_Type(value)
	return nil
}
func (Package_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{1, 0} }

type PackageRelease struct {
	KetchupMin       *string `protobuf:"bytes,1,opt,name=ketchup_min,json=ketchupMin" json:"ketchup_min,omitempty"`
	Tags             *bool   `protobuf:"varint,2,opt,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PackageRelease) Reset()                    { *m = PackageRelease{} }
func (m *PackageRelease) String() string            { return proto.CompactTextString(m) }
func (*PackageRelease) ProtoMessage()               {}
func (*PackageRelease) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *PackageRelease) GetKetchupMin() string {
	if m != nil && m.KetchupMin != nil {
		return *m.KetchupMin
	}
	return ""
}

func (m *PackageRelease) GetTags() bool {
	if m != nil && m.Tags != nil {
		return *m.Tags
	}
	return false
}

type Package struct {
	Name             *string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Author           []string        `protobuf:"bytes,2,rep,name=author" json:"author,omitempty"`
	Type             *Package_Type   `protobuf:"varint,3,opt,name=type,enum=press.packages.Package_Type" json:"type,omitempty"`
	Description      *string         `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Readme           *string         `protobuf:"bytes,5,opt,name=readme" json:"readme,omitempty"`
	VcsUrl           *string         `protobuf:"bytes,6,opt,name=vcs_url,json=vcsUrl" json:"vcs_url,omitempty"`
	Releases         *PackageRelease `protobuf:"bytes,11,opt,name=releases" json:"releases,omitempty"`
	Labels           []string        `protobuf:"bytes,12,rep,name=labels" json:"labels,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *Package) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Package) GetAuthor() []string {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Package) GetType() Package_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Package_unknown
}

func (m *Package) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Package) GetReadme() string {
	if m != nil && m.Readme != nil {
		return *m.Readme
	}
	return ""
}

func (m *Package) GetVcsUrl() string {
	if m != nil && m.VcsUrl != nil {
		return *m.VcsUrl
	}
	return ""
}

func (m *Package) GetReleases() *PackageRelease {
	if m != nil {
		return m.Releases
	}
	return nil
}

func (m *Package) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type Registry struct {
	// include other registry files
	RegistryVersion  *string    `protobuf:"bytes,1,opt,name=registry_version,json=registryVersion" json:"registry_version,omitempty"`
	Packages         []*Package `protobuf:"bytes,10,rep,name=packages" json:"packages,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Registry) Reset()                    { *m = Registry{} }
func (m *Registry) String() string            { return proto.CompactTextString(m) }
func (*Registry) ProtoMessage()               {}
func (*Registry) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *Registry) GetRegistryVersion() string {
	if m != nil && m.RegistryVersion != nil {
		return *m.RegistryVersion
	}
	return ""
}

func (m *Registry) GetPackages() []*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

func init() {
	proto.RegisterType((*PackageRelease)(nil), "press.packages.PackageRelease")
	proto.RegisterType((*Package)(nil), "press.packages.Package")
	proto.RegisterType((*Registry)(nil), "press.packages.Registry")
	proto.RegisterEnum("press.packages.Package_Type", Package_Type_name, Package_Type_value)
}
func (m *PackageRelease) SetKetchupMin(v *string) {
	m.KetchupMin = v
}

func (m *PackageRelease) SetTags(v *bool) {
	m.Tags = v
}

func (m *Package) SetName(v *string) {
	m.Name = v
}

func (m *Package) SetAuthor(v []string) {
	m.Author = v
}

func (m *Package) SetType(v *Package_Type) {
	m.Type = v
}

func (m *Package) SetDescription(v *string) {
	m.Description = v
}

func (m *Package) SetReadme(v *string) {
	m.Readme = v
}

func (m *Package) SetVcsUrl(v *string) {
	m.VcsUrl = v
}

func (m *Package) SetReleases(v *PackageRelease) {
	m.Releases = v
}

func (m *Package) SetLabels(v []string) {
	m.Labels = v
}

func (m *Registry) SetRegistryVersion(v *string) {
	m.RegistryVersion = v
}

func (m *Registry) SetPackages(v []*Package) {
	m.Packages = v
}

func init() { proto.RegisterFile("packages.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x50, 0x41, 0x4f, 0xb3, 0x40,
	0x10, 0xfd, 0xa0, 0xb4, 0xa5, 0xc3, 0x17, 0x24, 0x73, 0xb0, 0x7b, 0x30, 0x4a, 0x38, 0xa1, 0x07,
	0x62, 0xea, 0xcd, 0xbb, 0x47, 0x13, 0x43, 0xd4, 0x6b, 0xb3, 0xd2, 0x09, 0xc5, 0xc2, 0xb2, 0xd9,
	0x5d, 0x6a, 0xfa, 0xd7, 0xfc, 0x75, 0x06, 0xd8, 0x36, 0x7a, 0xe8, 0xed, 0xcd, 0x9b, 0xb7, 0xfb,
	0xde, 0x1b, 0x08, 0x25, 0x2f, 0x76, 0xbc, 0x24, 0x9d, 0x49, 0xd5, 0x9a, 0x16, 0x43, 0xa9, 0x48,
	0xeb, 0xec, 0xc8, 0x26, 0x4f, 0x10, 0xbe, 0x8c, 0x38, 0xa7, 0x9a, 0xb8, 0x26, 0xbc, 0x81, 0x60,
	0x47, 0xa6, 0xd8, 0x76, 0x72, 0xdd, 0x54, 0x82, 0x39, 0xb1, 0x93, 0x2e, 0x72, 0xb0, 0xd4, 0x73,
	0x25, 0x10, 0xc1, 0x33, 0xbc, 0xd4, 0xcc, 0x8d, 0x9d, 0xd4, 0xcf, 0x07, 0x9c, 0x7c, 0xbb, 0x30,
	0xb7, 0xff, 0xf4, 0x7b, 0xc1, 0x1b, 0xb2, 0x2f, 0x07, 0x8c, 0x97, 0x30, 0xe3, 0x9d, 0xd9, 0xb6,
	0x8a, 0xb9, 0xf1, 0x24, 0x5d, 0xe4, 0x76, 0xc2, 0x7b, 0xf0, 0xcc, 0x41, 0x12, 0x9b, 0xc4, 0x4e,
	0x1a, 0xae, 0xae, 0xb2, 0xbf, 0xe9, 0x32, 0xfb, 0x65, 0xf6, 0x7a, 0x90, 0x94, 0x0f, 0x4a, 0x8c,
	0x21, 0xd8, 0x90, 0x2e, 0x54, 0x25, 0x4d, 0xd5, 0x0a, 0xe6, 0x0d, 0x26, 0xbf, 0xa9, 0xde, 0x4b,
	0x11, 0xdf, 0x34, 0xc4, 0xa6, 0xc3, 0xd2, 0x4e, 0xb8, 0x84, 0xf9, 0xbe, 0xd0, 0xeb, 0x4e, 0xd5,
	0x6c, 0x36, 0x2e, 0xf6, 0x85, 0x7e, 0x53, 0x35, 0x3e, 0x82, 0xaf, 0xc6, 0xf2, 0x9a, 0x05, 0xb1,
	0x93, 0x06, 0xab, 0xeb, 0x33, 0x41, 0xec, 0x8d, 0xf2, 0x93, 0xbe, 0x37, 0xab, 0xf9, 0x07, 0xd5,
	0x9a, 0xfd, 0x1f, 0x8b, 0x8d, 0x53, 0x72, 0x07, 0x5e, 0x1f, 0x1a, 0x03, 0x98, 0x77, 0x62, 0x27,
	0xda, 0x2f, 0x11, 0xfd, 0xc3, 0x05, 0x4c, 0xcd, 0x96, 0x1a, 0x8a, 0x1c, 0x04, 0x98, 0xc9, 0xba,
	0x2b, 0x2b, 0x11, 0xb9, 0xc9, 0x27, 0xf8, 0x39, 0x95, 0x95, 0x36, 0xea, 0x80, 0xb7, 0x10, 0x29,
	0x8b, 0xd7, 0x7b, 0x52, 0xba, 0xef, 0x38, 0x1e, 0xf2, 0xe2, 0xc8, 0xbf, 0x8f, 0x34, 0x3e, 0x80,
	0x7f, 0xcc, 0xc7, 0x20, 0x9e, 0xa4, 0xc1, 0x6a, 0x79, 0x2e, 0xf6, 0x49, 0xf8, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x1f, 0x1c, 0xc0, 0x59, 0x10, 0x02, 0x00, 0x00,
}
